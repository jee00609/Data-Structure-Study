// Baekjoon_1260.cpp : 콘솔 응용 프로그램에 대한 진입점을 정의합니다.
//

#include "stdafx.h"

//문제
//그래프를 DFS로 탐색한 결과와 BFS로 탐색한 결과를 출력하는 프로그램을 작성하시오.
//단, 방문할 수 있는 정점이 여러 개인 경우에는 정점 번호가 작은 것을 먼저 방문하고,
//더 이상 방문할 수 있는 점이 없는 경우 종료한다.정점 번호는 1번부터 N번까지이다.
//
//입력
//첫째 줄에 정점의 개수 N(1 ≤ N ≤ 1, 000), 간선의 개수 M(1 ≤ M ≤ 10, 000), 탐색을 시작할 정점의 번호 V가 주어진다.
//다음 M개의 줄에는 간선이 연결하는 두 정점의 번호가 주어진다.
//어떤 두 정점 사이에 여러 개의 간선이 있을 수 있다.입력으로 주어지는 간선은 양방향이다.

//--인접 행렬--
//정점의 개수를 V라고 했을 때
//V x V 크기의 2차원 배열을 이용
//정점의 연결관계를 0과 1로 표현
//A[i][j] = 1(연결이 되어있을 때), 0(연결이 되어있지 않을 때)
//양방향 그래프일 경우 A[i][j] = A[j][i]

#include<iostream>
#include<queue>
using namespace std;

#define MAX_VALUE 1001            //'N이 1~1000 이므로 1000번째 인덱스에 접근 -> 크기 1001까지 선언
int N, M, V;                    //노드 개수, 간선 개수, 시작할 노드 번호
int mat[MAX_VALUE][MAX_VALUE];    //인접행렬 배열 선언
int visit[MAX_VALUE];            //visit 배열 default 는 0으로. . . 

void dfs(int v) {// 깊이 우선 탐색
	//인접한 노드를 깊게 계속 탐색
	/*1.정점 방문 표시
	2.정점 출력
	for(int i=0;i<=정점개수;i++){
		if(간선이 없거나 || 방문한 적 있으면)continue;
		dfs(v);
	}*/

	visit[v] = 1;//정점 방문 표시
	cout << v << '\t';//2.정점 출력
	for (int i = 0; i <= N; i++) {//입력받은 노드 수만큼 탐색
		if (visit[i] == 1 || mat[v][i] == 0)//간선이 없거나 || 방문한 적 있으면
			continue;
		dfs(i);//인접행렬이 1이면 서로 연결되있는 노드라서 dfs를 통해 다시 재귀
	}

}

void bfs(int v) {// 너비 우선 탐색
	//인접한 노드를 큐를 이용하여 넓게 검색
	/*1.큐생성
	2.큐에 정점 삽입
	3.정점 방문 표시
	while(큐가 빌때까지)
		1.큐의 맨 앞 정점 출력
		2.그 값 삭제
		for (int i = 1; i <= 정점개수; i++) {
			if (간선 연결되어 있고 && 방문한적 없으면) { || 방문했거나 간선 연결이 안됬으면으로 변경 가능하지 않을까?
				1.큐에 i 정점 삽입
				2.i번째 방문 표시
			}
		}*/

	queue<int> q;//1.큐생성
	q.push(v);//큐에 정점 삽입
	visit[v] = 0;//정점 방문 표시
	while (!q.empty()) {//큐가 빌때까지
		v = q.front();//v를 큐의 맨 앞 정점으로 초기화
		cout << q.front() << '\t';//1.큐의 맨 앞 정점 출력
		q.pop();//2.그 값 삭제
		for (int i = 1; i <= N; i++) {
			if (visit[i] == 0 || mat[v][i] == 0)//방문했거나 간선 연결이 안됬으면
				continue;
			q.push(i);//q에 다시 삽입
			visit[i] = 0;
		}
	}

}

int main() {
	int x, y;
	
	cin >> N >> M >> V;            //N은 노드개수, M은 간선의개수, V는 처음 위치의 기준이 되는 노드
	
	for (int i = 0; i<M; i++) {    //간선의 개수만큼 서로 이어줄 x와 y노드를 입력받습니다.
		cin >> x >> y;
		mat[x][y] = mat[y][x] = 1;    //인접행렬 표시
	}
	dfs(V);
	cout << '\n';

	bfs(V);
	cout << '\n';
	return 0;
}


